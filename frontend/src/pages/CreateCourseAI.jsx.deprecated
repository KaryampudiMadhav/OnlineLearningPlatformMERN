import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import toast from 'react-hot-toast';
import { 
  BookOpen, 
  DollarSign, 
  Sparkles, 
  Brain, 
  Loader2, 
  Plus, 
  X, 
  Save,
  Zap,
  Video,
  Quiz,
  Clock
} from 'lucide-react';
import api from '../config/api';

const CreateCourse = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [aiGenerating, setAiGenerating] = useState(false);
  const [error, setError] = useState('');
  const [generationStep, setGenerationStep] = useState('');
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    instructor: '',
    category: 'Web Development',
    level: 'Beginner',
    price: 0,
    originalPrice: 0,
    duration: '',
    image: 'https://images.unsplash.com/photo-1516321318423-f06f85e504b3',
    language: 'English',
    requirements: [''],
    whatYouWillLearn: [''],
    tags: [''],
    curriculum: []
  });

  const [aiConfig, setAiConfig] = useState({
    moduleCount: 5,
    lessonsPerModule: 4,
    generateQuizzes: true,
    includeVideoUrls: true
  });

  const categories = [
    'Web Development',
    'Data Science',
    'Artificial Intelligence',
    'UI/UX Design',
    'Digital Marketing',
    'Mobile Development',
    'Photography',
    'Music Production',
    'Business',
    'Other'
  ];

  const levels = ['Beginner', 'Intermediate', 'Advanced'];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Internal array helpers (prefixed with underscore to satisfy ESLint for unused vars)
  const _handleArrayInputChange = (index, value, field) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].map((item, i) => i === index ? value : item)
    }));
  };

  const _addArrayItem = (field) => {
    setFormData(prev => ({
      ...prev,
      [field]: [...prev[field], '']
    }));
  };

  const _removeArrayItem = (index, field) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].filter((_, i) => i !== index)
    }));
  };

  const generateAICourse = async () => {
    if (!formData.title || !formData.description) {
      toast.error('Please provide course title and description for AI generation');
      return;
    }

    try {
      setAiGenerating(true);
      setGenerationStep('Initializing AI course generation...');

      const generatePayload = {
        title: formData.title,
        description: formData.description,
        category: formData.category,
        level: formData.level,
        moduleCount: aiConfig.moduleCount,
        lessonsPerModule: aiConfig.lessonsPerModule
      };

      setGenerationStep('🤖 Generating course curriculum with AI...');
      
      const response = await api.post('/ai-generation/generate-course', generatePayload);
      
      if (response.data.success) {
        const { curriculum, generatedModules, totalLessons, recommendedDuration } = response.data.data;
        
        setFormData(prev => ({
          ...prev,
          curriculum: curriculum,
          duration: recommendedDuration || prev.duration
        }));

        setGenerationStep('✅ AI generation completed successfully!');
        
        toast.success(
          `🎉 Generated ${generatedModules} modules with ${totalLessons} lessons and quizzes!`,
          { duration: 4000 }
        );

        setTimeout(() => {
          setGenerationStep('');
          setAiGenerating(false);
        }, 2000);
        
      } else {
        throw new Error(response.data.message || 'AI generation failed');
      }
      
    } catch (error) {
      console.error('AI Generation Error:', error);
      setGenerationStep('❌ AI generation failed');
      toast.error(error.response?.data?.message || 'Failed to generate course with AI');
      
      setTimeout(() => {
        setGenerationStep('');
        setAiGenerating(false);
      }, 3000);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.curriculum || formData.curriculum.length === 0) {
      toast.error('Please generate course content with AI or add modules manually');
      return;
    }

    try {
      setLoading(true);
      setError('');

      const response = await api.post('/courses', formData);
      
      if (response.data.success) {
        toast.success('Course created successfully! 🎉');
        navigate('/instructor/dashboard');
      } else {
        throw new Error(response.data.message || 'Failed to create course');
      }
    } catch (error) {
      console.error('Course creation error:', error);
      setError(error.response?.data?.message || 'Failed to create course');
      toast.error(error.response?.data?.message || 'Failed to create course');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-gray-800 rounded-lg shadow-lg border border-gray-700">
          {/* Header */}
          <div className="bg-gradient-to-r from-purple-600 to-blue-600 rounded-t-lg p-6">
            <div className="flex items-center gap-3">
              <BookOpen className="text-white" size={32} />
              <div>
                <h1 className="text-2xl font-bold text-white">Create New Course</h1>
                <p className="text-purple-100">Build your course with AI-powered content generation</p>
              </div>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="p-6 space-y-8">
            {/* Basic Information */}
            <div className="space-y-6">
              <h2 className="text-xl font-semibold text-white flex items-center gap-2">
                <BookOpen size={20} />
                Course Information
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Course Title *
                  </label>
                  <input
                    type="text"
                    name="title"
                    value={formData.title}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="Enter course title"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Instructor Name *
                  </label>
                  <input
                    type="text"
                    name="instructor"
                    value={formData.instructor}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="Enter instructor name"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Category *
                  </label>
                  <select
                    name="category"
                    value={formData.category}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    required
                  >
                    {categories.map(cat => (
                      <option key={cat} value={cat}>{cat}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Level *
                  </label>
                  <select
                    name="level"
                    value={formData.level}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    required
                  >
                    {levels.map(level => (
                      <option key={level} value={level}>{level}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Price (₹) *
                  </label>
                  <input
                    type="number"
                    name="price"
                    value={formData.price}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="0"
                    min="0"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Original Price (₹)
                  </label>
                  <input
                    type="number"
                    name="originalPrice"
                    value={formData.originalPrice}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="0"
                    min="0"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Course Description *
                </label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  rows={4}
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder="Describe what students will learn in this course..."
                  required
                />
              </div>
            </div>

            {/* AI Course Generation */}
            <div className="bg-gradient-to-r from-purple-900/50 to-blue-900/50 rounded-lg p-6 border border-purple-500/50">
              <div className="flex items-center gap-3 mb-4">
                <Brain className="text-purple-400" size={24} />
                <h2 className="text-xl font-semibold text-white">AI Course Generation</h2>
                <span className="px-2 py-1 bg-purple-600 text-white text-xs rounded-full">POWERED BY GEMINI</span>
              </div>

              <p className="text-gray-300 mb-6">
                Generate complete course content including modules, lessons, video URLs, and quizzes using advanced AI.
              </p>

              {/* AI Configuration */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Number of Modules
                  </label>
                  <select
                    value={aiConfig.moduleCount}
                    onChange={(e) => setAiConfig(prev => ({ ...prev, moduleCount: parseInt(e.target.value) }))}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-purple-500"
                  >
                    <option value={3}>3 Modules</option>
                    <option value={4}>4 Modules</option>
                    <option value={5}>5 Modules</option>
                    <option value={6}>6 Modules</option>
                    <option value={7}>7 Modules</option>
                    <option value={8}>8 Modules</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Lessons per Module
                  </label>
                  <select
                    value={aiConfig.lessonsPerModule}
                    onChange={(e) => setAiConfig(prev => ({ ...prev, lessonsPerModule: parseInt(e.target.value) }))}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-purple-500"
                  >
                    <option value={3}>3 Lessons</option>
                    <option value={4}>4 Lessons</option>
                    <option value={5}>5 Lessons</option>
                    <option value={6}>6 Lessons</option>
                  </select>
                </div>
              </div>

              {/* AI Features */}
              <div className="bg-green-600/10 border border-green-500/20 rounded-lg p-4 mb-6">
                <div className="flex items-center gap-2 mb-3">
                  <Zap className="text-green-400" size={16} />
                  <span className="text-green-400 font-medium">AI Features Included:</span>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  <div className="flex items-center gap-2 text-green-300 text-sm">
                    <Video size={14} />
                    <span>Realistic Video URLs</span>
                  </div>
                  <div className="flex items-center gap-2 text-green-300 text-sm">
                    <Quiz size={14} />
                    <span>Interactive Quizzes</span>
                  </div>
                  <div className="flex items-center gap-2 text-green-300 text-sm">
                    <BookOpen size={14} />
                    <span>Detailed Lesson Content</span>
                  </div>
                  <div className="flex items-center gap-2 text-green-300 text-sm">
                    <Clock size={14} />
                    <span>Progressive Difficulty</span>
                  </div>
                </div>
              </div>

              {/* Generation Status */}
              {aiGenerating && (
                <div className="bg-blue-600/10 border border-blue-500/30 rounded-lg p-4 mb-6">
                  <div className="flex items-center gap-3">
                    <Loader2 className="animate-spin text-blue-400" size={20} />
                    <span className="text-blue-300">{generationStep}</span>
                  </div>
                </div>
              )}

              {/* Generate Button */}
              <button
                type="button"
                onClick={generateAICourse}
                disabled={aiGenerating || !formData.title || !formData.description}
                className="w-full flex items-center justify-center gap-3 px-6 py-4 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed font-semibold"
              >
                {aiGenerating ? (
                  <>
                    <Loader2 className="animate-spin" size={20} />
                    Generating with AI...
                  </>
                ) : (
                  <>
                    <Sparkles size={20} />
                    Generate Complete Course with AI
                  </>
                )}
              </button>

              {formData.curriculum.length > 0 && (
                <div className="mt-4 p-4 bg-green-600/10 border border-green-500/30 rounded-lg">
                  <div className="flex items-center gap-2 text-green-400">
                    <BookOpen size={16} />
                    <span className="font-medium">
                      Generated: {formData.curriculum.length} modules with {formData.curriculum.reduce((acc, mod) => acc + (mod.lessons?.length || 0), 0)} lessons
                    </span>
                  </div>
                </div>
              )}
            </div>

            {/* Generated Curriculum Preview */}
            {formData.curriculum.length > 0 && (
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-white">Generated Course Curriculum</h3>
                <div className="space-y-4 max-h-96 overflow-y-auto">
                  {formData.curriculum.map((module, moduleIndex) => (
                    <div key={moduleIndex} className="bg-gray-700 rounded-lg p-4">
                      <div className="flex items-start justify-between mb-3">
                        <div>
                          <h4 className="text-white font-medium">{module.title}</h4>
                          <p className="text-gray-300 text-sm mt-1">{module.description}</p>
                          <p className="text-purple-400 text-xs mt-1">Duration: {module.duration}</p>
                        </div>
                      </div>
                      
                      {module.lessons && (
                        <div className="space-y-2">
                          <h5 className="text-sm font-medium text-gray-300">Lessons:</h5>
                          {module.lessons.map((lesson, lessonIndex) => (
                            <div key={lessonIndex} className="bg-gray-600 rounded p-3">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="text-white text-sm">{lesson.title}</span>
                                {lesson.isPreview && (
                                  <span className="px-2 py-1 bg-green-600 text-white text-xs rounded">Preview</span>
                                )}
                              </div>
                              <p className="text-gray-300 text-xs">{lesson.content}</p>
                              <div className="flex items-center gap-4 mt-2 text-xs">
                                <span className="text-purple-400">⏱️ {lesson.duration}</span>
                                {lesson.videoUrl && (
                                  <span className="text-blue-400">🎥 Video included</span>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                      
                      {module.quiz && (
                        <div className="mt-3 p-3 bg-purple-600/20 rounded">
                          <div className="flex items-center gap-2">
                            <Quiz size={16} className="text-purple-400" />
                            <span className="text-purple-400 text-sm font-medium">
                              Quiz: {module.quiz.questions?.length || 0} questions
                            </span>
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {error && (
              <div className="bg-red-600/10 border border-red-500/50 rounded-lg p-4">
                <p className="text-red-400">{error}</p>
              </div>
            )}

            {/* Submit Button */}
            <div className="flex gap-4 pt-6 border-t border-gray-700">
              <button
                type="button"
                onClick={() => navigate(-1)}
                className="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                Cancel
              </button>
              
              <button
                type="submit"
                disabled={loading || formData.curriculum.length === 0}
                className="flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-lg hover:from-green-700 hover:to-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed font-semibold"
              >
                {loading ? (
                  <>
                    <Loader2 className="animate-spin" size={20} />
                    Creating Course...
                  </>
                ) : (
                  <>
                    <Save size={20} />
                    Create Course
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default CreateCourse;